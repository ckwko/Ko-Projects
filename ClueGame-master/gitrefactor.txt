diff --git a/bin/clueGame/Board.class b/bin/clueGame/Board.class
index fd29193..d16d71e 100644
Binary files a/bin/clueGame/Board.class and b/bin/clueGame/Board.class differ
diff --git a/bin/clueGame/BoardCell.class b/bin/clueGame/BoardCell.class
index 90067af..b0a6290 100644
Binary files a/bin/clueGame/BoardCell.class and b/bin/clueGame/BoardCell.class differ
diff --git a/bin/clueGame/Room.class b/bin/clueGame/Room.class
index 8365a5d..ac15f6b 100644
Binary files a/bin/clueGame/Room.class and b/bin/clueGame/Room.class differ
diff --git a/bin/experiment/BoardCell.class b/bin/experiment/BoardCell.class
deleted file mode 100644
index 14ea386..0000000
Binary files a/bin/experiment/BoardCell.class and /dev/null differ
diff --git a/logfile.txt b/logfile.txt
deleted file mode 100644
index e69de29..0000000
diff --git a/src/clueGame/Board.java b/src/clueGame/Board.java
index 7c0e199..d66393d 100644
--- a/src/clueGame/Board.java
+++ b/src/clueGame/Board.java
@@ -1,8 +1,3 @@
-/* Authors: Calvin Ko and Michael Pineiro
- * This class is the Board, which contains the number of rows, an adjacency
- * matrix, a grid of the board cell objects, and loads in the config files.
- * Follows a singleton design pattern
- */
 package clueGame;
 
 import java.util.HashMap;
@@ -13,19 +8,17 @@ import java.util.Set;
 import java.io.*;
 
 public class Board {
-	static int numColumns; 
-	static int numRows;
-	// adjMatrix and Grid Setup
 	private Set<BoardCell> targets;
 	private Set<BoardCell> visited;
 	private Map<BoardCell, Set<BoardCell>> adjMatrix;
+	static int numColumns; // initialize up here because of singleton pattern
+	static int numRows;
 	private BoardCell[][] grid;
-	// configuration setup
+	
 	private String layoutConfigFile;
 	private String setupConfigFile;
 	private Map<Character, Room> roomMap;
 	private Map<Character, String> setupSymbols;
-	
 	private static Board theInstance = new Board();
 	
 	/*
@@ -49,14 +42,14 @@ public class Board {
     		out = new PrintWriter("logfile.txt");
     		loadSetupConfig();
         	loadLayoutConfig();
+//    		adjMatrix = new HashMap<BoardCell, Set<BoardCell>>();
+//    		calcAdjacencyMatrix();
     	} catch (BadConfigFormatException e) {
     		out.println("File not formatted correctly");
-    		System.out.println("File not formatted correctly");
     		e.printStackTrace();
     		
     	} catch (FileNotFoundException e) {
-    		out.println("File not found");
-    		System.out.println("File not found");
+			// TODO Auto-generated catch block
 			e.printStackTrace();
 		}
     	
@@ -69,6 +62,7 @@ public class Board {
 		visited = new HashSet<BoardCell>();
 		targets = new HashSet<BoardCell>();
 		// add start location to visited list
+		
 		visited.add(startCell);
 		findAllTargets(startCell, pathLength); // recursive function that does BFS
  	}
@@ -150,35 +144,68 @@ public class Board {
 	/*
 	 * load layout files
 	 */
-	public void loadLayoutConfig() {
+	public void loadLayoutConfig() throws BadConfigFormatException{
 		try {
-			// Get the number of rows and columns and initialize the grid
 			FileReader fileReader = new FileReader("data/" + layoutConfigFile); // read in the file
 			Scanner in = new Scanner(fileReader);
-			int rowAndColumn[] = getNumRowsAndColsFromInputFile(in);
-			int numRows = rowAndColumn[0];
-			int numColumns = rowAndColumn[1];
-			grid = new BoardCell[numRows][numColumns]; // set the grid up
+			String line = "";
+			numRows = 0;
+			while (in.hasNextLine()) { // iterate through to get number of rows
+				numRows++;
+				line = in.nextLine();
+			}
+			numColumns = line.split(",").length; // record number of columns
 			
-			// Actually load the data from the config file
+			grid = new BoardCell[numRows][numColumns]; // set the grid up
+			//fileReader.close();
 			fileReader = new FileReader("data/" + layoutConfigFile); // read in the file
 			in = new Scanner(fileReader);
 			int currentRow = 0; // keep track of location within the grid
-			while (in.hasNext()) { // iterate through each line
-				String rowContent[] = in.next().split(","); // split each line into elements
-				// check for incorrectly formatted files
-				if (rowContent.length != numColumns) { 
-					throw new BadConfigFormatException("File has null spaces"); 
-				}
-				for (int i = 0; i < rowContent.length; i++) { // each element
+			while (in.hasNext()) {
+				String rowContent[] = in.next().split(",");
+				for (int i = 0; i < rowContent.length; i++) {
 					char initial = rowContent[i].charAt(0);
-					if(!setupSymbols.containsKey(initial)) { // check that the symbol exists
+					
+					// check for incorrectly formatted files
+					if (rowContent.length != numColumns) { 
+						throw new BadConfigFormatException("File has null spaces"); 
+					}
+					if(!setupSymbols.containsKey(initial)) {
 						throw new BadConfigFormatException("Symbol not found");
 					}
 					
-				BoardCell cell = loadCellInformation(currentRow, i, initial, rowContent[i]); // create a cell from information
-				grid[currentRow][i] = cell; // add to grid
-				setRoomCenterAndLabel(cell.isRoomCenter(), cell.isLabel(), rowContent[i].charAt(0), currentRow, i); // set room information
+					DoorDirection direction = DoorDirection.NONE;
+					boolean isRoomCenter = false;
+					boolean isLabel = false;
+					char secretPass = ' ';
+					// turn this into a switch case later
+					if (rowContent[i].length() > 1) {
+						char special = rowContent[i].charAt(1);
+						if (special == '>') {
+							direction = DoorDirection.RIGHT;
+						} else if (special == '<') {
+							direction = DoorDirection.LEFT;
+						} else if (special == 'v') {
+							direction = DoorDirection.DOWN;
+						} else if (special == '^') {
+							direction = DoorDirection.UP;
+						} else if (special == '*') {
+							isRoomCenter = true;
+						} else if (special == '#'){
+							isLabel = true;
+						} else {
+							secretPass = special;
+						}
+					}
+					grid[currentRow][i] = new BoardCell(currentRow, i, initial, direction, isRoomCenter, isLabel, secretPass);
+					
+					if (isRoomCenter) { // check if cell is a center
+						roomMap.get(rowContent[i].charAt(0)).setCenterCell(grid[currentRow][i]);
+					}
+					
+					if (isLabel) {
+						roomMap.get(rowContent[i].charAt(0)).setLabelCell(grid[currentRow][i]);
+					}
 				}
 				currentRow++;
 			}
@@ -187,82 +214,6 @@ public class Board {
 			System.out.println("Layout Config file not found.");
 		} catch (IOException e) {
 			e.printStackTrace();
-		} catch (BadConfigFormatException e) {
-			e.printStackTrace();
-			System.out.println("The config file is not formatted correctly.");
-		}
-	}
-	
-	/*
-	 * Helper function for loadLayoutConfig to get the number of rows and columns in config file
-	 */
-	private int[] getNumRowsAndColsFromInputFile(Scanner in) {
-		int rowAndColumn[] = new int[2];
-		rowAndColumn[0] = 0;
-		String line = "";
-		while (in.hasNextLine()) { // iterate through to get number of rows
-			rowAndColumn[0]++;
-			line = in.nextLine();
-		}
-		rowAndColumn[1] = line.split(",").length; // record number of columns
-		return rowAndColumn;
-	}
-	
-	/*
-	 * Helper function to loadLayoutConfig(). Creates the cell and gets the special
-	 * characters
-	 */
-	private BoardCell loadCellInformation(int currentRow, int currentColumn, char initial, String cellElement) {
-		DoorDirection direction = DoorDirection.NONE;
-		boolean isRoomCenter = false;
-		boolean isLabel = false;
-		char secretPass = ' '; // keep track of cells that are vents
-		// turn this into a switch case later
-		if (cellElement.length() > 1) {
-			char special = cellElement.charAt(1);
-			switch (special) {
-			case '>':
-				direction = DoorDirection.RIGHT;
-				break;
-			case '<':
-				direction = DoorDirection.LEFT;
-				break;
-			case '^':
-				direction = DoorDirection.UP;
-				break;
-			case 'v':
-				direction = DoorDirection.DOWN;
-				break;
-			case '*':
-				isRoomCenter = true;
-				break;
-			case '#':
-				isLabel = true;
-				break;
-			default:
-				secretPass = special;
-				break;
-			}
-		}
-		BoardCell cell = new BoardCell(
-				currentRow, currentColumn, 
-				initial, direction, 
-				isRoomCenter, isLabel, 
-				secretPass
-				);
-		return cell;
-	}
-	
-	/*
-	 * Helper function to loadLayoutConfig for setting individual cell info for rooms 
-	 */
-	private void setRoomCenterAndLabel(boolean isRoomCenter, boolean isLabel, char initial, int row, int col) {
-		if (isRoomCenter) { // check if cell is a center
-			roomMap.get(initial).setCenterCell(grid[row][col]);
-		}
-		
-		if (isLabel) {
-			roomMap.get(initial).setLabelCell(grid[row][col]);
 		}
 	}
 	
diff --git a/src/clueGame/BoardCell.java b/src/clueGame/BoardCell.java
index 4251d03..4d892a6 100644
--- a/src/clueGame/BoardCell.java
+++ b/src/clueGame/BoardCell.java
@@ -1,9 +1,4 @@
-/* Authors: Calvin Ko and Michael Pineiro
- * This class is for an individual cell, which stores the individual information
- * for each. The cells are stored within the grid in the board. Each cell contains
- * basic information (location, label, etc), an adjacency matrix, and identifiers (
- * isRoom, isOccupied).
- */
+// Michael Pineiro, Calvin Ko
 
 package clueGame;
 
@@ -26,28 +21,26 @@ public class BoardCell {
 	private boolean isOccupied; // if the cell is occupied
 	
 	/*
-	 * Basic constructor
+	 * constructor
 	 */
 	public BoardCell(int row, int col) {
 		super();
+		adjList = new HashSet<BoardCell>();
 		this.row = row;
 		this.col = col;
-		
-		adjList = new HashSet<BoardCell>();
 	}
 	
 	//most likely refactor this
-	public BoardCell(int row, int col, char initial, DoorDirection doorDirection, boolean roomCenter, boolean roomLabel, char secretPassage) {
+	public BoardCell(int row, int col, char initial, DoorDirection direction, boolean roomCenter, boolean roomLabel, char secretPassage) {
 		super();
+		adjList = new HashSet<BoardCell>();
 		this.row = row;
 		this.col = col;
 		this.initial = initial;
-		this.doorDirection = doorDirection;
+		doorDirection = direction;
 		this.roomCenter = roomCenter;
 		this.roomLabel = roomLabel;
 		this.secretPassage = secretPassage;
-		
-		adjList = new HashSet<BoardCell>();
 	}
 
 	/*
diff --git a/src/clueGame/Room.java b/src/clueGame/Room.java
index 0ba1af8..2b6d1d7 100644
--- a/src/clueGame/Room.java
+++ b/src/clueGame/Room.java
@@ -5,9 +5,6 @@ public class Room {
 	private BoardCell centerCell;
 	private BoardCell labelCell;
 	
-	/*
-	 * Constructor
-	 */
 	public Room(String name) {
 		this.name = name;
 	}
@@ -33,16 +30,10 @@ public class Room {
 		return centerCell;
 	}
 	
-	/*
-	 * Setter for center cell
-	 */
 	public void setCenterCell(BoardCell cell) { 
 		centerCell = cell;
 	}
 	
-	/*
-	 * Setter for label cell
-	 */
 	public void setLabelCell(BoardCell cell) {
 		labelCell = cell;
 	}
